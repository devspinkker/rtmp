se dede combiar la funcion onPublish y hacerla async


node_modules\node-media-server\src\node_rtmp_session.js
const { getUserByCmt, getUserByKey } = require('../../../controllers/userCtrl');

  async onPublish(invokeMessage) {
    if (typeof invokeMessage.streamName !== 'string') {
      return;
    }
    const parts = invokeMessage.streamName.split('?')[0].split("/");
    const key = parts[parts.length - 1];
    //Se comprueba si la clave que llega es para las resoluciones o es el hls del obs 
    // si es obs no se conntendra el _ y luego la resolucion 
    let cleanedKey = key;
    const underscoreIndex = key.indexOf('_');
    if (underscoreIndex !== -1) {
      cleanedKey = key.substring(0, underscoreIndex);
    }
    // se pide la info dependienndo de si es la key conn el _ o si es el cmt
    const user = underscoreIndex !== -1 ? await getUserByKey("live" + cleanedKey) : await getUserByCmt(cleanedKey);

    if (!user?.keyTransmission) {
      console.log(user.response.config.url)
      console.log("[Pinkker] Usuario no encontrado");
      return;
    }
    // esto es necesario porque si usas el keyTransmission que viene de user, las tranmisiones se van
    // a colapsar, en cambio se le agrego la info que viene despues del _ mas el _ no pasa
    const streamPathSuffix = underscoreIndex !== -1 ? key.substring(underscoreIndex) : '';
    this.publishStreamPath = '/' + this.appname + '/' + user.keyTransmission.slice(4) + streamPathSuffix;

    this.publishArgs = QueryString.parse(invokeMessage.streamName.split('?')[1]);
    this.publishStreamId = this.parserPacket.header.stream_id;
    context.nodeEvent.emit('prePublish', this.id, this.publishStreamPath, this.publishArgs);
    if (!this.isStarting) {
      return;
    }

    if (this.config.auth && this.config.auth.publish && !this.isLocal) {
      let results = NodeCoreUtils.verifyAuth(this.publishArgs.sign, this.publishStreamPath, this.config.auth.secret);
      if (!results) {
        Logger.log(`[rtmp publish] Unauthorized. id=${this.id} streamPath=${this.publishStreamPath} streamId=${this.publishStreamId} sign=${this.publishArgs.sign} `);
        this.sendStatusMessage(this.publishStreamId, 'error', 'NetStream.publish.Unauthorized', 'Authorization required.');
        return;
      }
    }

    if (context.publishers.has(this.publishStreamPath)) {
      this.reject();
      Logger.log(`[rtmp publish] Already has a stream. id=${this.id} streamPath=${this.publishStreamPath} streamId=${this.publishStreamId}`);
      this.sendStatusMessage(this.publishStreamId, 'error', 'NetStream.Publish.BadName', 'Stream already publishing');
    } else if (this.isPublishing) {
      Logger.log(`[rtmp publish] NetConnection is publishing. id=${this.id} streamPath=${this.publishStreamPath} streamId=${this.publishStreamId}`);
      this.sendStatusMessage(this.publishStreamId, 'error', 'NetStream.Publish.BadConnection', 'Connection already publishing');
    } else {
      Logger.log(`[rtmp publish] New stream. id=${this.id} streamPath=${this.publishStreamPath} streamId=${this.publishStreamId}`);
      context.publishers.set(this.publishStreamPath, this.id);
      this.isPublishing = true;

      this.sendStatusMessage(this.publishStreamId, 'status', 'NetStream.Publish.Start', `${this.publishStreamPath} is now published.`);
      for (let idlePlayerId of context.idlePlayers) {
        let idlePlayer = context.sessions.get(idlePlayerId);
        if (idlePlayer && idlePlayer.playStreamPath === this.publishStreamPath) {
          idlePlayer.onStartPlay();
          context.idlePlayers.delete(idlePlayerId);
        }
      }
      context.nodeEvent.emit('postPublish', this.id, this.publishStreamPath, this.publishArgs);
    }
  }
